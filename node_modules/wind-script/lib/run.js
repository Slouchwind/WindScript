"use strict";
const fs = require("fs");
const { colorConsole } = require("wind-script/lib/logger");

Array.prototype.includesValue = function (value) {
    var includesValue = false
    for (let i = 0; i < this.length; i += 3) {
        includesValue = (this[i] === value);
        if (includesValue) { return includesValue };
    }
    return includesValue;
}

var varNotError = true;
const varClass = {
    new: (className = "Str") => {
        switch (className) {
            case "Num":
                return new Number();
            case "Str":
                return new String();
            case "Date":
                return new Date();
            default:
                colorConsole.error(`Uncaught ReferenceError: ${className} is not defined`);
                varNotError = false;
                return;
        }
    },
    var: (className = "Str", value) => {
        switch (className) {
            case "Num":
                return Number(value);
            case "Str":
                return String(value);
            case "Date":
                return new Date(value);
            default:
                colorConsole.error(`Uncaught ReferenceError: ${className} is not defined`);
                varNotError = false;
                return;
        }
    }
}

class WSrun {
    constructor(debug = false) {
        this.debug = debug;
        return this;
    }
    setPath(path) {
        //读取文件
        var getFile = fs.readFileSync(path).toString();
        this.getCode = getFile
            .replace(/\r/g, "")
            .replace(/\n/g, "\\n");
        this.isCmd = false;
        return this;
    }
    setCode(code) {
        this.getCode = code;
        this.isCmd = false;
        return this;
    }
    setCmd(code) {
        this.getCode = code;
        this.isCmd = true;
        return this;
    }
    run() {
        //编译
        var getCode = this.getCode;
        var allCode = [""];
        var allVar = this.allVar || { data: [] };
        var noteText = "";
        for (let i = 0; i < getCode.length; i++) {
            if (noteText == "") {
                if (getCode[i] == ";") {
                    allCode[allCode.length - 1] += getCode[i];
                    allCode[allCode.length] = "";
                }
                else if (getCode[i] == "/") {
                    if (getCode[i + 1] == "/" || getCode[i + 1] == "*") {
                        noteText = `/${getCode[i + 1]}`;
                    }
                }
                else if (getCode[i] == "\\") {
                    if (getCode[i + 1] == "n") {
                        allCode[allCode.length] = "";
                        i++;
                    }
                }
                else {
                    allCode[allCode.length - 1] += getCode[i];
                }
            }
            else {
                if (noteText == "//") {
                    if (getCode[i] == "\\") {
                        if (getCode[i + 1] == "n") {
                            i++;
                            noteText = "";
                        }
                    }
                }
                if (noteText == "/*") {
                    if (getCode[i] == "*") {
                        if (getCode[i + 1] == "/") {
                            i++;
                            noteText = "";
                        }
                    }
                }
            }
        }
        allCode.forEach((value, i) => {
            allCode[i] = value.trim();
            if (allCode[i] == "") {
                allCode.splice(i, 1);
            }
            else if (allCode[i][allCode[i].length - 1] !== ";") {
                allCode[i] += ";";
            }
        });

        //运行
        for (let i = 0; i < allCode.length; i++) {
            let code = allCode[i].trim();

            //var
            if (code.includes("{") && code.includes("}")) {
                let varName = code.slice(code.indexOf("}") + 1, code.includes("=") ? code.indexOf("=") : code.length - 1).trim();
                let varType = code.slice(code.indexOf("{") + 1, code.indexOf("}"));
                let varValue;
                if (allVar.data.includesValue(varName)) {
                    varValue = code.includes("=") ? code.slice(code.indexOf("=") + 1, code.length - 1).trim() : varClass.new(varType);
                    if (varNotError) {
                        allVar.data[allVar.data.indexOf(varName) + 1] = varType;
                        allVar.data[allVar.data.indexOf(varName) + 2] = varClass.var(varType, varValue);
                        if (this.isCmd) colorConsole.log(varClass.var(varType, varValue));
                    }
                    else {
                        allVar.data.splice(allVar.data.indexOf(varName), 2);
                    }
                }
                else {
                    allVar.data[allVar.data.length] = varName;
                    allVar.data[allVar.data.length] = varType;
                    varValue = code.includes("=") ? code.slice(code.indexOf("=") + 1, code.length - 1).trim() : varClass.new(varType);
                    if (varNotError) {
                        allVar.data[allVar.data.length] = varClass.var(varType, varValue);
                        if (this.isCmd) colorConsole.log(varClass.var(varType, varValue));
                    }
                    else {
                        allVar.data.splice(allVar.data.indexOf(varName), 2);
                    }
                }
            }
            this.allVar = allVar;

            //console
            var consoleUse = ["W warn", "E error", "L log", "I info", " log"];
            for (let i = 0; i < consoleUse.length; i++) {
                if (code.startsWith(`${consoleUse[i].split(" ")[0]}==>`)) {
                    let logVar = code.slice(code.indexOf(`${consoleUse[i].split(" ")[0]}==>`) + (`${consoleUse[i].split(" ")[0]}==>`.length), code.length - 1).trim();
                    if (allVar.data.includesValue(logVar)) {
                        colorConsole[consoleUse[i].split(" ")[1]](allVar.data[allVar.data.indexOf(logVar) + 2]);
                    }
                    else {
                        colorConsole.error(`Uncaught ReferenceError: ${logVar} is not defined`);
                    }
                }
            }
        }

        //debug
        if (this.debug) {
            console.log(allCode);
            console.log(allVar);
        }
    }
}

module.exports = WSrun;
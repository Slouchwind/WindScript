const fs = require("fs");
const path = require("path");

function getFileList(dirPath = ".", last = "ws") {
    var getDir = fs.readdirSync(dirPath);
    var returnDir = { line: [], name: [], path: [] };
    getDir.forEach((value) => {
        let filePath = path.resolve(dirPath, value);
        if (value.endsWith(`.${last}`)) {
            returnDir.line[returnDir.line.length] = fs.readFileSync(filePath).toString().match(/\n/g).length + 1;
            returnDir.name[returnDir.name.length] = value;
            returnDir.path[returnDir.path.length] = filePath;
        }
        if (fs.statSync(filePath).isDirectory() && !(dirPath.includes(".git"))) {
            var listToConcat = getFileList(filePath, last);
            returnDir.line = returnDir.line.concat(listToConcat.line);
            returnDir.name = returnDir.name.concat(listToConcat.name);
            returnDir.path = returnDir.path.concat(listToConcat.path);
        }
    })
    return returnDir;
}

exports.getFileList = getFileList;

function promiseToTable(promise, output) {
    var returnTable = [`i${" ".repeat(String(promise[output[0]].length).length - 1)}`];
    for (let i = 0; i < promise[output[0]].length; i++) {
        returnTable[returnTable.length] = `${i}${" ".repeat(String(promise[output[0]].length).length - String(i).length)}`;
    }
    for (let index = 0; index < output.length; index++) {
        var getTable = promise[output[index]];
        var maxNum = output[index].length;
        getTable.forEach((value, i) => {
            getTable[i] = String(value);
            if (getTable[i].length > maxNum) maxNum = getTable[i].length;
        });
        getTable.forEach((value, i) => {
            getTable[i] += " ".repeat(maxNum - value.length);
        });
        returnTable.forEach((value, i) => {
            if (i == 0) {
                returnTable[0] += ` | ${output[index]}${" ".repeat(maxNum - output[index].length)}`;
            }
            else {
                returnTable[i] += ` | ${getTable[i - 1]}`;
            }
        })
    }
    return returnTable;
}

exports.promiseToTable = promiseToTable;